# After changing this file, check it on:
#   http://lint.travis-ci.org/

language: python

addons:

  apt:

    packages: &common_packages

    - libatlas-base-dev

    - liblapack-dev

    - gfortran

    - libgmp-dev

    - libmpfr-dev

    - libsuitesparse-dev

    - ccache

    - swig

    - libmpc-dev

env:

  global:

   # Wheelhouse for pre-release wheels

   - PRE_WHEELS="https://7933911d6844c6c53a7d-47bd50c35cd79bd838daf386af554a83.ssl.cf2.rackcdn.com"

   # Using a single thread can actually speed up some computations on Travis

   - OPENBLAS_NUM_THREADS=1

matrix:

  include:

    - arch: arm64

      dist: bionic

      python: 3.7

      env:

        - TESTMODE=fast

        - COVERAGE=

        # Need a test with most recent Python version where we build from an

        # sdist (uses pip build isolation), to check that the version we

        # specify in pyproject.toml (will be older than --pre --upgrade) works

        - USE_SDIST=1

    - arch: arm64

      dist: bionic

      python: 3.7

      env:

        - TESTMODE=full

        - COVERAGE=

    # Test SciPy with the debug version of Python.

    # However travis only specifies regular or development builds of Python

    # so we must install python3.6-dbg using apt.

before_install:

  - echo $TRAVIS_OS_NAME

  - |

    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then

      free -m

      export PATH=/usr/lib/ccache:$PATH

    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then

      brew cask uninstall oclint

    fi

  - python --version # just to check

  - export NPY_NUM_BUILD_JOBS=2

  - uname -a

  - df -h

  - ulimit -a

  - mkdir builds

  - cd builds

  - |

    if [ -n "${USE_DEBUG}" ]; then

        # Work in our own virtualenv to isolate from travis-ci packages.

        virtualenv --python=$USE_DEBUG venv

        source venv/bin/activate

    fi

  - python -V -V

  - python -c 'import sys; print("Python debug build:", hasattr(sys, "gettotalrefcount"))'

  - |

    if [ -n "${USE_DEBUG}" ]; then

        # see gh-10676; need to pin pytest version with debug

        # Python 3.6

        travis_retry pip install pytest==5.0.1

    fi

  - |

    if [ -z "${USE_DEBUG}" -a "${TRAVIS_CPU_ARCH}" == "amd64" -a "${TRAVIS_PYTHON_VERSION}" != "3.8" ]; then

        travis_retry pip install numba==0.47

        travis_retry pip install --only-binary=:all: sparse

    fi

  - |

    if [ "${REFGUIDE_CHECK}" == "1" ]; then

        travis_retry pip install matplotlib Sphinx==1.7.2

    fi

  - |

    if [ "${ASV_CHECK}" == "1" ]; then

        travis_retry pip install "asv>=0.4.1"

    fi

  - cd ..

  - set -o pipefail

  - if [[ "${TRAVIS_CPU_ARCH}" == "arm64" ]]; then

      wget -q "https://github.com/conda-forge/miniforge/releases/download/4.8.2-1/Miniforge3-4.8.2-1-Linux-aarch64.sh"  -O miniconda.sh;

      chmod +x miniconda.sh;

      ./miniconda.sh -b -p $HOME/miniconda3;

      export PATH=$HOME/miniconda3/bin:$PATH;

      conda config --set always_yes yes --set auto_update_conda false;

      conda install pip conda;

      conda update -n base conda;

      conda info -a;

      conda install pytest pytest-xdist scipy mpmath Cython pybind11 coverage;

    fi

script:

  - python -c 'import numpy as np; print("relaxed strides checking:", np.ones((10,1),order="C").flags.f_contiguous)'

  # Make sure that relaxed strides checking is actually in effect; otherwise fail loudly

  - if [ "$NPY_RELAXED_STRIDES_CHECKING" == "1" ]; then python -c'import numpy as np; assert np.ones((10,1),order="C").flags.f_contiguous'; fi

  # Test that mpmath actually uses gmpy2

  - python -u runtests.py --parallel=3 | tee runtests.log

  - tools/validate_runtests_log.py $TESTMODE < runtests.log

  - if [ "${REFGUIDE_CHECK}" == "1" ]; then python runtests.py -g --refguide-check; fi

  - if [ "${ASV_CHECK}" == "1" ]; then (cd benchmarks && python -masv check -E existing); fi

  # Check dynamic symbol hiding works on Linux

after_script:

  - ccache -s

  # Upload coverage information

  - |

    if [ -n "${COVERAGE}" ]; then

        RUN_DIR=`echo build/testenv/lib/python*/site-packages`

        # Produce gcov output for codecov to find

        find build -name '*.gcno' -type f -exec gcov -pb {} +

        mv *.gcov "$RUN_DIR/"

        # Run codecov

        pushd "$RUN_DIR"

        codecov -X gcov

        popd

    fi

notifications:

  # Perhaps we should have status emails sent to the mailing list, but

  # let's wait to see what people think before turning that on.

  email: false
